version: '3.8'

services:
  # Web UI - Flask application for visualization and configuration
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: toddler-tracker-web
    ports:
      - "9000:9000"
    volumes:
      # Shared databases
      - ./yard.db:/app/yard.db
      - ./matches.db:/app/matches.db
      - ./config.db:/app/config.db
      # PLY storage (read-only for web)
      - ./ply_storage:/app/ply_storage:ro
      - ./npy_storage:/app/npy_storage:ro
    networks:
      - toddler-tracker
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:9000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Detector - Hybrid detection service with CUDA support
  detector:
    build:
      context: .
      dockerfile: Dockerfile.detector
    container_name: toddler-tracker-detector
    volumes:
      # Shared databases (read-write for detector)
      - ./yard.db:/app/yard.db
      - ./matches.db:/app/matches.db
      - ./config.db:/app/config.db
      # Model cache (persist downloaded models)
      - ~/.cache/torch:/root/.cache/torch
    networks:
      - toddler-tracker
    restart: unless-stopped
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True
      - PYTHONUNBUFFERED=1
      - FRIGATE_URL=http://frigate:5000
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "python3", "-c", "import os; assert os.path.exists('matches.db')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  toddler-tracker:
    driver: bridge
    name: toddler-tracker-network

# Volumes for persistence (optional - currently using bind mounts)
volumes:
  model_cache:
    driver: local
